[{"instances": [{"port": 22, "ip": "192.168.1.200", "tags": {"group": "web"}, "name": "fedora17-200", "user": "root"}, {"port": 22, "ip": "192.168.1.212", "tags": {"group": "web"}, "name": "debian7-212", "user": "root"}, {"port": 22, "ip": "192.168.1.201", "tags": {"group": "web"}, "name": "fedora19-201", "user": "root"}, {"port": 22, "ip": "192.168.1.202", "tags": {"group": "web"}, "name": "arch2014-202", "user": "root"}, {"port": 22, "ip": "192.168.1.203", "tags": {"group": "web"}, "name": "arch2013-203", "user": "root"}, {"port": 22, "ip": "192.168.1.204", "tags": {"group": "web"}, "name": "debian6-204", "user": "root"}, {"port": 22, "ip": "192.168.1.205", "tags": {"group": "web"}, "name": "gentoo2013-205", "user": "root"}, {"port": 22, "ip": "192.168.1.206", "tags": {"group": "web"}, "name": "gentoo2014-206", "user": "root"}, {"port": 22, "ip": "192.168.1.207", "tags": {"group": "web"}, "name": "opensuse12-207", "user": "root"}, {"port": 22, "ip": "192.168.1.208", "tags": {"group": "web"}, "name": "scientific7-208", "user": "root"}, {"port": 22, "ip": "192.168.1.209", "tags": {"group": "web"}, "name": "slackware14-209", "user": "root"}, {"port": 22, "ip": "192.168.1.214", "tags": {"group": "web"}, "name": "centos7-214", "user": "root"}, {"port": 22, "ip": "192.168.1.211", "tags": {"group": "web"}, "name": "ubuntu12-211", "user": "root"}, {"port": 22, "ip": "192.168.1.213", "tags": {"group": "web"}, "name": "centos5-213", "user": "root"}, {"port": 22, "ip": "192.168.1.210", "tags": {"group": "web"}, "name": "ubuntu14-210", "user": "ubuntu"}], "jobs": [{"args": {"password": "password"}, "job_type": "add_key"}, {"script_id": "$script_id", "job_type": "cmd", "expects": "cpu", "timeout": 10}], "script": {"content": "#!/usr/bin/env python\n\n# name: system stats\n# desc: CPU,mem,disk,network stats for linux\n# lang: python\n\nimport os\nimport time\nimport subprocess\nfrom subprocess import Popen, PIPE\n\n\ndef file_desc():\n    with open('/proc/sys/fs/file-nr') as f:\n        line = f.readline()\n    \n    fd = [int(x) for x in line.split()]\n    \n    return fd\n\ndef load_avg():\n    with open('/proc/loadavg') as f:\n        line = f.readline()\n    \n    load_avgs = [float(x) for x in line.split()[:3]]\n    \n    return load_avgs\n\ndef cpu_stats(sample_duration=2):\n    with open('/proc/stat') as f1:\n        with open('/proc/stat') as f2:\n            c1 = f1.read()\n            time.sleep(sample_duration)\n            c2 = f2.read()\n\n    cs1 = {}\n    for l in c1.splitlines():\n        if 'cpu' not in l:\n            continue\n        d = l.strip().split()\n        cs1[d[0]] = d[1:]\n\n    cs2 = {}\n    for l in c2.splitlines():\n        if 'cpu' not in l:\n            continue\n        d = l.strip().split()\n        cs2[d[0]] = d[1:]\n\n    cs = {}\n    for c in cs1.keys():\n        deltas = [int(b) - int(a) for a, b in zip(cs1[c], cs2[c])]\n        total = sum(deltas)\n        percents = [100 - (100 * (float(total - x) / total)) for x in deltas ]\n        cs[c] = {\n            'user': percents[0],\n            'nice': percents[1],\n            'system': percents[2],\n            'idle': percents[3],\n            'iowait': percents[4],\n            'irq': percents[5],\n            'softirq': percents[6],\n        }\n\n    return cs\n\n\ndef disk_usage():\n    \"\"\"Return disk usage statistics.\"\"\"\n    df = {}\n    output = Popen(['df', '-l', '-m', '-x', 'proc', '-x', 'tmpfs', '-x', \\\n                  'devtmpfs', '-x', 'ecryptfs'], stdout=PIPE).communicate()[0]\n    for l in output.splitlines()[1:]:\n        d = l.split()\n        df[d[0]] = d[1:] # size, used, free, percent, mountpoint\n\n    return df\n\n\ndef disk_stats(sample_duration=2):\n    \"\"\"Return (inbytes, outbytes, in_num, out_num, ioms) of disk.\"\"\"\n    with open('/proc/diskstats') as f1:\n        with open('/proc/diskstats') as f2:\n            content1 = f1.read()\n            time.sleep(sample_duration)\n            content2 = f2.read()\n\n    ds1 = {}\n    for l in content1.splitlines():\n        if 'loop' in l:\n            continue\n        if 'ram' in l:\n            continue\n        d = l.strip().split()\n        ds1[d[2]] = [d[3], d[7], d[4], d[8], d[12]]\n\n    ds2 = {}\n    for l in content2.splitlines():\n        if 'loop' in l:\n            continue\n        if 'ram' in l:\n            continue\n        d = l.strip().split()\n        ds2[d[2]] = [d[3], d[7], d[4], d[8], d[12]]\n\n    ds = {}\n    for d in ds1.keys():\n        rnum = float(int(ds2[d][0]) - int(ds1[d][0])) / sample_duration\n        wnum = float(int(ds2[d][1]) - int(ds1[d][1])) / sample_duration\n        rKB = float(int(ds2[d][2]) - int(ds1[d][2])) / sample_duration / 1024\n        wKB = float(int(ds2[d][3]) - int(ds1[d][3])) / sample_duration / 1024\n        util = 100 * (float(int(ds2[d][4]) - int(ds1[d][4]))/(sample_duration * 1000))\n        ds[d] = [rKB, wKB, rnum, wnum, util]\n\n    return ds\n\n\nclass DiskError(Exception):\n    pass\n\n\ndef mem_stats():\n    with open('/proc/meminfo') as f:\n        for line in f:\n            if line.startswith('MemTotal:'):\n                mem_total = int(line.split()[1]) * 1024\n            elif line.startswith('Active: '):\n                mem_active = int(line.split()[1]) * 1024\n            elif line.startswith('MemFree:'):\n                mem_free = (int(line.split()[1]) * 1024)\n            elif line.startswith('Cached:'):\n                mem_cached = (int(line.split()[1]) * 1024)\n            elif line.startswith('SwapTotal: '):\n                swap_total = (int(line.split()[1]) * 1024)\n            elif line.startswith('SwapFree: '):\n                swap_free = (int(line.split()[1]) * 1024)\n    return (mem_active, mem_total, mem_cached, mem_free, swap_total, swap_free)\n\n\n# net rx/tx stat\ndef net_stats(sample_duration=2):\n    with open('/proc/net/dev') as f1:\n        with open('/proc/net/dev') as f2:\n            content1 = f1.read()\n            time.sleep(sample_duration)\n            content2 = f2.read()\n    sep = ':'\n    stats1 = {}\n    for line in content1.splitlines():\n        if sep in line:\n            i = line.split(':')[0].strip()\n            data = line.split(':')[1].split()\n            rx_bytes1, tx_bytes1 = (int(data[0]), int(data[8]))\n            rx_pack1, tx_pack1 = (int(data[1]), int(data[9]))\n            stats1[i] = [rx_bytes1, tx_bytes1, rx_pack1, tx_pack1]\n\n    stats2 = {}\n    for line in content2.splitlines():\n        if sep in line:\n            i = line.split(':')[0].strip()\n            data = line.split(':')[1].split()\n            rx_bytes2, tx_bytes2 = (int(data[0]), int(data[8]))\n            rx_pack2, tx_pack2 = (int(data[1]), int(data[9]))\n            stats2[i] = [rx_bytes2, tx_bytes2, rx_pack2, tx_pack2]\n\n    stats_ps = {}\n    for i in stats1.keys():\n        rx_bytes_ps = (stats2[i][0] - stats1[i][0]) / sample_duration\n        tx_bytes_ps = (stats2[i][1] - stats1[i][1]) / sample_duration\n        rx_pps = (stats2[i][2] - stats1[i][2]) / sample_duration\n        tx_pps = (stats2[i][3] - stats1[i][3]) / sample_duration\n        stats_ps[i] = [ rx_bytes_ps, tx_bytes_ps, rx_pps, tx_pps ]\n\n    return stats_ps\n    \nclass NetError(Exception):\n    pass\n\n\ndef main():\n    \n    # load\n    print 'load: %s' % load_avg()[0]\n    \n    # cpu\n    print \"\\ncpu stats:\\n%14s %8s %8s %8s %8s %8s %8s %8s\" % (\"cpu\", \"user\", \"nice\", \"system\", \"iowait\", \"irq\", \"softirq\", \"idle\")\n    cs = cpu_stats()\n    cpus = cs.keys()\n    cpus.sort()\n    for c in cpus:\n      print \"%14s %7.1f%% %7.1f%% %7.1f%% %7.1f%% %7.1f%% %7.1f%% %7.1f%%\" % (c, cs[c]['user'], \\\n          cs[c]['nice'], cs[c]['system'], cs[c]['iowait'], cs[c]['irq'], cs[c]['softirq'], cs[c]['idle'])\n\n    # disk\n    print '\\ndisk usage:\\n%14s %9s %8s %8s %8s %s' % (\"device\", \"total(MB)\", \"used(MB)\", \"free(MB)\", \"used%\", \"mount point\")\n    df = disk_usage()\n    disks = df.keys()\n    disks.sort()\n    for d in disks:\n      print '%14s %9s %8s %8s %8s %s' % (d, df[d][0], df[d][1], df[d][2], df[d][3], df[d][4])\n\n    print \"\\ndisk stats:\\n%14s %8s %8s %8s %8s %8s\" % (\"device\", \"rKB/s\", \"wKB/s\", \"r/s\", \"w/s\", \"util%\")\n    ds = disk_stats()\n    devices = ds.keys()\n    devices.sort()\n    for d in devices:\n      print \"%14s %8.1f %8.1f %8.1f %8.1f %7s%%\" % (d, ds[d][0], ds[d][1], ds[d][2], ds[d][3], ds[d][4])\n      \n    # memory\n    print \"\\nmem stats:\\n%14s %8s %8s %8s %8s\" % (\"total(MB)\", \"used(MB)\", \"cached(MB)\", \"free(MB)\", \"usage%\")\n    used, total, cached, free, _, _ = mem_stats()\n    mem_usage = float(used) * 100 / float(total)\n    print \"%14s %8s %10s %8s %7.2f%%\" % (int(total)/1048576, int(used)/1048576, \\\n      int(cached)/1048576, int(free)/1048576, mem_usage)\n\n    # network\n    print \"\\nnetwork stats:\\n%14s %8s %8s %8s %8s\" % (\"interface\", \"rbyte/s\", \"tbyte/s\", \"rpps\", \"tpps\")\n    nss = net_stats()\n    interfaces = nss.keys()\n    interfaces.sort()\n    for i in interfaces:\n      print \"%14s %8d %8d %8d %8d\" % (i, nss[i][0], nss[i][1], nss[i][2], nss[i][3])\n    \n    \nif __name__ == '__main__':   \n    main()\n\n", "name": "stats", "language": "python"}}]
